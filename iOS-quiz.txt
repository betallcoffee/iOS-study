1.Difference Between shallow copy and deep copy?
answer:
Shallow copies duplicate as little as possible. A shallow copy of a collection si a copy of the collection structure, not the elements. With a shallow copy, two collections now share the individual elements.

Deep copies duplicate everything. A deep copy of a collection is two collections with all of the elements in the original collection duplicated.

referenceURL:stackoverflow.com/questions/184710/what-is-the-difference-between-a-deep-copy-and-a-shallow-copy

2.What is advantage of categories? What is difference between implementing a category and inheritance?
answer:
A category is a way to add methods to existing classes. They usually reside in files called "Class+CategoryName.h", like "NSView+CustomAdditions.h" (and .m, of course).

A class extension is a category, except for 2 main difference:
  1. The category has no name. It is declared like this;
    @interface someClass()
    - (void) anadditionalMethod;
    @end

  2. The implementation of the extension must be in the main @implementation block of the file.

It's quite common to see a class extension at the top of a .m file declaring mroe methods on the class, that are then implemented below in the main @implementation section of the class. This is a way to declare "pseudo-private" methods (pseudo-private in that they're not really private, just not externally exposed).

In Class-Extension you're able to overwrite properties from a (public) read-only property to be internally readwrite. And since LLVM 1.5 you're able to do even more: you can now declare instance variable in a class extension so they are gone from the regular interface.

referenceURL:stackoverflow.com/questions/3499704/difference-between-categoryand-class-extension

3.Difference between categories and extension?
Class extensions were added in Objective-C 2.0 to solve two specific problems:
  1. Allow an object to have a "private" interface that is checked by the compiler.
  2. Allow publicly-readable, privately-writable properties.
 
Private Interface
Before Objective-C 2.0, if a developer wanted to have a set of methods in Objective-C, they often declared a "Private" category in the class's implementation file:

@interface MyClass(private)
- (id)awesomePrivateMethod;
@end

However, these private methods were often mixed into the class's @implementation block (not a separate @implementation block for the Private category). And why not? These aren't really extensions to the class; they just make up for the lack of public/private restrictions in Objective-C categories.

The problem is that Objective-C compliers assume that methods declared in a category will be implemented elsewhere, so they don't check to make sure the methods are implemented. Thus, a developer could declare awesomePrivateMethod but fail to implement it, and the compiler wouldn't warn them of the problem. That is the problem you noticed: in a category, you can declare a property (or a method) but fail to get a warning if you never actually implement it -- that's because the complier expects it to be implemented "somewhere" (most likely, in another compilation unit independent of this one).

Enter class extensions. Methods declared in a class extensions are assume to be implemented in the main @implementation block, if they're not, the compiler will issue a warning.

Publicly-Readable, Privately-Writable Properties
It is often beneficial to implement an immutable data structure -- that is, one in which outside code can't use a setter to modify the object's state. However, it can still be nice to have a writable property for internal use. Class extensions allow that: in the public interface, a developer can declare a property to be read-only, but then declare it to be writable in the class extension. To outside code, the property will be read-only, but a seter can be used internally.

So Why Can't I Declare a Writable Property in a Category?
Categories can't add instance variables. A setter often requires some sort of backing storage. It was decided that allowing a category to declare a property that likely required a backing store was A Bad Thing. Hence, a category can't declare a writable property.

They Look Similar, But Are Different
The confusion lies in the idea that a class extension is just an "unnamed category". The syntax is similar and implies this idea; I imagine it was just chosen because it was familiar to Objective-C programmers and, in some ways, class extensions are like categories. They are alike in that both features allow you to add methods (and properties) to an existing class, but they serve different purposes and thus allow different behaviors.

referenceURL:stackoverflow.com/questions/465679/minutia-on-objective-c-categories-and-extensions

4. Difference between protocol in objective-c and interface in java.
First off, a little historical perspective on the topic, from one of the creators of Java. Next, Wikipedia has a moderately helpful section on Objective-C protocols. In particular, understand that Objective-c supports both formal protocols (which  are explicitly declared with the @protocol keyword, the equivalent of a Java interface) and informal protocols (just one or more methods implemented by a class, which can be discoverd via reflection).

If you adopt a formal protocol (Objectvie-C terminology for "implement an interface") the compiler will emit warnings for unimplemented methdos. Just as you would expect in Java. Unlike Java (as skaffman mentioned), if an Objective-C class implements the methods contained in a formal protocol, it is said to "conform" to that protocol, even if its interface doesn't explicitly adopt it. You can test protocol conformance in code (using -conformsToProtocol:) like this:
    if ([myObject conformsToProtocol:@protocol(MyProtocol)]) {
    }
 
As of Objective-C 2.0 (in OS X 10.5 "Leopard" and iOS), formal protocols can now define optional methods, and a class conforms to a protocol as long as it implements all the required methods. You can use the @required (default) and @optional keywords to toggle whether the method declarations that follow must or may be implemented to conform to the protocol. (See the section of Apple's Objective-C 2.0 Programming Language guide that discusses optional protocol methods)

Optional protocol methods open up a lot of flexibility to developers, particularly for implementing delegates and listeners. Instead of extending something like a MouseputAdapter (which can be annoying, since Java is also single-inheritance) or implementing a lot of pointless, empty mehtonds, you can adopt a protocol and implement only the optional methods you care about. With this pattern, the caller checks whether the methods is implemented before invoking it (using -respondsToSelector) like so:
    if ([myObject respondsToSelector:@selector(fillArray:withObject:)]) {
        [myObject fillArray:anArray withObject:foo];
    }

if the overhead of reflectino becomes a problem, you can always cache the boolean result for resue, but resist the urge to optimize prematurely.

They are almost identical. However the one thing that has caught me out, is that unelss you explicily declare that an Objective-C protocol also implements NSObject, references to that protocol don't get access to the methods that NSObject declares (without a compiler warning anyway). With java you can have a reference to an interface, and still call toString() etc on it.
eg:
    Objective-C:
    @protocol MyProtocol
    // Protocol definition
    @end

    id <MyProtocol> myProtocol;

    [myProtocol retain] // Compiler warning

    Java:
    public interface MyInterface {
    // intterface definition
    }

    MyInterface myInterface;

    myInterface.toString(); // Works fine.

    Objective-C (fixed):
    @protocol MyProtocol <NSObject>
    // Protocol definition
    @end

    id <MyProtocol> myProtocol;

    [myProtocol retain] // No Warning

referenceURL:stackoverflow.com/questions/990360/differences-between-java-interfaces-and-objective-c-protocols

5. What are KVO and KVC?
KVC is a way to call property accessor methods, or otherwise access a property, using string identifiers.

What do I mean by "otherwise access"? For KVC purposes, an instance variable with no accessor methods counts as an informal property. It'll get or set the value of the instance variable directly if no matching accessor pair can be found. (Yes, this is not worth using in modern code. Always declare an @property for anything you intend to access elsewhere, and, inversely, don't use KVC to access anything that isn't a public property.)

Property accessor methods are what KVC will call if they exist (preferred, both by KVC and by every sane programmer, over direct ivar access). An accessor may get or set an instance variable, as synthesized accessors do, or access some other storage.

Accessors are implementation, properties are interface, and KVC is one way to use them.

And how do I distinguish between dots that call setValue:forKeyPath: and simple accessors?

A key path is a string, whereas a property-access expression is an expression. The compiler evaluates a property-access expression and translates it into one or more Objective-C messages, whereas a key path is evaluated by KVC at run time.

So, when you use a key path:
[someObject setValue:theValue forKeyPath:@"foo.bar.baz"];

You know it's a key path because (1) it's a string, as indicated in this case by the string-iteral syntax @"...", and (2) you're passing the key path string to setValue:forKeyPath: for it to evaluate.

Using a key path is using KVC to access the named properties. It will send any relevant accessor messages on your behalf.

When you use a property-access expression:
someOject.foo.bar.baz = theValue;
You know it's a property access expression because you are not identifying the properties with a string. You are accessing them yourself, in your own code.

There isn't much reason to use KVC in any form; when you know the property at authorship/compile time, it's best to have an @property declared and to access the property yourself, whether with property access expressions or message expressions. The time to use KVC is when you don't know what property you want to access until run time, which is pretty rare. It's mainly a building-block technology behind KVO. Cocoa Bindings, parts of Core Animation, etc.

How you make a property KVC compliant depends on whether that property is an attribute, a to-one relationship, or a to-many relationship. For attribute and to-one relationship, a class must implement at least one of the follwing in the given order of preference(key refers to the property key)
    The class has a declared property with the name key.
    It implements accessor methods named key and, if the property is mutable, setKey:. (If the property is a Boolean attribute, the getter accessor method has the form isKey.)
    It declares an instance variable of the form key or _key.
Implementing KVC compliant for a to-many relationship is a more complicated procedure.

Key-value observing is a mechanism that allows objects to be notified of changes to specified properties of other objects
It is particularly useful for communication between model and controller layers in an application.
You can observe properties including simple attributes, to-one relationships, and to-many relationships. Observers of to-many relationships are informed of the type of change made--as well as which objects are involved in the change.
    Observing Object must register as an observer of the Observered Object's property by sending an addObserver:forKeyPath:options:context: message.
    In order to respond to change notifications, the observer must implement the observeValueForKeyPath:ofObject:change:context: method. This method implementation defines how the observer responds to change notifications. It is in this method that you can customize your response to a change in one of the observed properties. 
    The observeValueForKeyPath:ofObject:change:context: method is automatically invoked when the value of an observed property is changed in a KVO-compliant manner, or if a key upon which it depends is changed.

referenceURL:stackoverflow.com/questions/8191373/whats-the-difference-between-kev-and-properties


6. What is purpose of delegates?
When an object receives a request, the object can either handle the request or pass the request on to a second object to do the work.
If the objects decides to pass the request on, you say that the object has forwarded responsibility for handing the requests to the second object.

The delegate pattern is used to have someone else actually do the work.
    when you want to perform some additional actions before/after your delegate 
    when you have imcompatible interfaces and you want to adapt one to the other.
You get the original object and delegate to it from methods that conform to the desired interface.
    when you want to hide some complexity from the user of your class, you can have methods that delegate to different actual works. 
For example, a Car can have start(), openWindow() and brake(), but each of these methods will actually delegate to the engine, windows and braking system.
referenceURL:stackoverflow.com/questions/7168714/what-is-the-purpose-of-a-delegation-pattern

7. What are mutable and immutable types in objective c?
A mutable object can be mutated or changed. An immutable object cannot.
The advantages of your mutable objects is obvious, but they should only be used when necessary (which is a lot less often than you think) as they take up more memory than immutable objects.

referenceURL:stackoverflow.com/questions/7071096/what-is-difference-between-mutable-and-immutable.

8. When we call objective-C is runtime language what does it mean?

9. What is difference between NSNotification and delegate ?
Cocoa has provided an Observer Pattern in the Cocoa Library called the NSNotificationCenter.
The basic idea is that a listener registers with a broadcaster using some predefined protocol.
At some later point, the broadcaster is told to notify all of its listeners, where it calls somce function on each of its listeners and passes certain arguments along.
This allows for asynchronous message passing between two different objects that don't have to know about one-another , they just have to know about the broadcaster.

The Application Delegate is an object which receives notifications when the UIApplication object reaches certain states. In many respects, it is a specialized one to one observer pattern and synchronous message.

referenceURL:stackoverflow.com/questions/1900352/what-is-nsnotification

10. What is push notification?
What if a application is not connected to its provider or even running on the device or computer 
when the provider has new data for it to download? How does it learn about this waiting data?
Push notifications are the solution to this dilemma. A push notification is a short message that a provider has delivered to the operating systerm of a device or compute,
the operating systerm, in turn, informs the user of a client application that there is data to be downloaded, a message to be viewed, and so on.
If the user enables this feature and the application is properly registered the notification is delivered to the operating systerm and possibly to the application.
Apple Push Notification service is the primary technology for the push-notification feature.

referenceURL:stackoverflow.com/questions/2558645/push-notification-in-iphone-application

11. Polymorphism in Objective-C.
There are some different kinds class, but all inheriting from the same base class. 
Examples, the base class is Vehicle, and the subclasses are Car, Train, and Plane. Vehicle have a method - (void)drive. 
all the subclasses override the method. Then there's a variable _pointer which type is (Vehicle *) and it points to a instance of class Car.
When calling [_pointer drive] will invoke the class Car's method.
In Objective-C messages are handled dynamically, which gives an equivalent to C++ virtual methods.

12. Singleton?
The Singleton pattern is almost the simplest form of design pattern erver.
The intent of the pattern is to make an object of a class be the sole instance in a system.
To achieve that, we can begin with the point where clients instantiate it.
So we need to "block" every access to create the object with a mechanism that allows only a single instance of the object's class to go out.
We can use a factory method to bottleneck the instantiation process.
That method should be a static method (class method),
as it wouldn't make sense to allow an instance of the class to create another sole instance.

13. What is responder chain?
If the first responder [to an event or action message] cannot handle an event or action message,
it forwards it to the "next responder" in a linked series called the repsonder chain.
The responder chain allows repsonder objects to transfer responsibility for handing an event or action message to other objects in the application.
If an object in the responder chain cannot handle the event or action, it resends the message to the next responder in the chain.
The message travels up the chain, toward higher-level objects, until it is handled.
If it isn't handled, the application discards it.
The First Responder is a very specific concept in Cocoa. The only time iOS decides to set the First Responder is when a text field gets focus.
At all other times you must explicitly control which object you want to be the first responder (see -canBecomeFirstResonder, -becomeFirstResponder).
There is no such thing as a second responder.
There is a default chain which can be view->superview->supreview but might also include UIViewControllers, UIWindows, UIWindowControllers, UIApplication and more, so it heavily depends on your object hierarchy (not just your view hierarchy, so you can't say nextResponder is always the parent view).
On OS X 10.6 the default chain is even different for different types of events and actions and can even include your app delegate, which may or may not be a responder, I'm not sure if this is the case in iOS.
After you have managed the First Responder it is down to you to insert, remove and append items to it's responder chain to achieve your desired aim.

referenceURL:stackoverflow.com/questions/3768851/what-is-responder-chain-in-iphone-sdk-how-it-works

14. Difference between frame and bounds?
The bounds of an UIView is the rectangle, expressed as a location(x,y) and size (width, height) relative to its own coordinate system(0,0).
The frame of an UIView is the rectangle, expressed as a location(x,y) and size(width, height) relative to the superview it is contained within.
So, we can see that in both cases, the width and the height of the view is the same regardless of whether we are looking at the bounds or frame.
What is different is the x,y positioning of the view. By default, the origin of the bounds rectangle is set to (0,0),
but you can change this value to display different portions of the view.
The size of the bounds rectangle is couple to the size of the frame rectangle,
so that changes to one affect the other.
referenceURL:stackoverflow.com/questions/1210047/iphone-development-whats-the-difference-between-the-frames-and-the-bounds

15.Difference between method and selector?
For efficiency, full ASCII names are not used as method selectors in compiled code.
Instead, the compiler writes each methode name into a table, then pairs the name with a unique identifier that represents the method at runtime.
The runtime system makes sure each identifier is unique.
No two selectors are the same, and all methods with the same name have the same selector.

Compiled selectors are assigned to a special type, SEL, to distinguish them from other data.
Valid selectors are never 0. You must let the system assign SEL identifiers to methods;
it's futile to assign them arbitrarily.
The @selector() directive lets you refer to the compiled selector, rather than to the full method name.
In some cases, you may need to convert a character string to a selector at runtime. You can do this with the NSSelectorFromString function.
Conversion in the opposite direction is also possible. The NSStringFromSelector function return a method name of a selector.

Compiled selectors identify method names, not method implementations.
The display method for one class, for example, has the same selector as display methods defined in other classes.
This is essential for polymorphism and dynamic binding; it lets you send the same message to receivers belonging to different classes.
If there were one selector per method implementation, a message would be no different from a function call.
A class method and an instance method with the same anme are assigned the same selector. However, because of their separate domains, there's no confusion between the two.
A class could define a display class method in addition to a dispaly instance method.

The messaging routine has accessto method implementations only through selectors, so it treats all methods with the same selector alike.
It discovers the return type of a method, and the data types of its parameters, from the selector.
Therefore, except for messages sent to statically typed receivers, dynamic binding requires all implementations of identically named methods to have the same retrun type and the same parameter types.
(Statically typed receivers are an exception to this rule because the compiler can learn about the method implementation from the class type.)

Although identically named class methods and instance methods are represented by the same selector, they can have different parameter types and return types.
referenceURL:stackoverflow.com/questions/5608476/whats-the-difference-between-a-method-and-a-selector.

16. NSOperation ?
The NSOoperation class is an abstract class you use to encapsulate the code and data associated with a single task.
Because it is abstract, you do not use this class directly but instead subclass or use one of the system-defined subclasses (NSInvocationOperation or NSBlockOperation) to perform the actual task.
Despite being abstract, the base implementation of NSOperation does include significant logic to coordinate the safe execution of your task.
The presence of this built-in logic allows you to focus on the actual implementation of your task, rather than on the glue code needed to ensure it works correctly with other system objects.
An operation object is a single-shot object-that is, it executes its task once and cannot be used to execute it again.
You typically execute operations by adding them to an operation queue (an instance of the NSOperationQueue class).
An operation queue executes its operation either directly, by running them on secondy threads, or indirectly using the libdispatch library (also known as Grand Central Dispatch).
If you do not want to use an operation queue, you can execute an operation yourself by calling its start method directly from you code.
Executing operations manually does not put more of a burden on your code, because starting an operation that is not in the ready state triggers an exception.
The isReady method reports on the operation's readiness.


